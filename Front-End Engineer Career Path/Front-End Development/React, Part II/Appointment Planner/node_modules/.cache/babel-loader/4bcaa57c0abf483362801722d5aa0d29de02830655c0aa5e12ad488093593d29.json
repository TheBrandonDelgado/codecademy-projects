{"ast":null,"code":"var _jsxFileName = \"/Users/brandondelgado/Documents/workspace/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = _ref => {\n  _s();\n  let {\n    contacts,\n    updateContacts,\n    appointments\n  } = _ref;\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\n  const [name, setName] = useState('');\n  const [phoneNumber, setPhoneNumber] = useState('');\n  const [email, setEmail] = useState('');\n  const [duplicateName, setDuplicateName] = useState(false);\n  useEffect(() => {\n    contacts.forEach(contact => {\n      if (contact.name === name) {\n        setDuplicateName(true);\n      }\n    });\n  });\n  const handleSubmit = e => {\n    e.preventDefault();\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\n    if (!duplicateName) {\n      updateContacts(name, phoneNumber, email);\n      setName('');\n      setPhoneNumber('');\n      setEmail('');\n    }\n  };\n\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileList, {\n        contacts: contacts,\n        appointments: appointments\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactsPage, \"UWbelEN50xBQC5Wid+Uete70L80=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","ContactForm","TileList","jsxDEV","_jsxDEV","ContactsPage","_ref","_s","contacts","updateContacts","appointments","name","setName","phoneNumber","setPhoneNumber","email","setEmail","duplicateName","setDuplicateName","forEach","contact","handleSubmit","e","preventDefault","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/brandondelgado/Documents/workspace/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = ({ contacts, updateContacts, appointments }) => {\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n  const [ name, setName ] = useState('')\r\n  const [ phoneNumber, setPhoneNumber ] = useState('')\r\n  const [ email, setEmail ] = useState('')\r\n  const [ duplicateName, setDuplicateName ] = useState(false)\r\n\r\n  useEffect(() => {\r\n    contacts.forEach(contact => {\r\n      if (contact.name === name) {\r\n        setDuplicateName(true)\r\n      }\r\n    })\r\n  })\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n    if (!duplicateName) {\r\n      updateContacts(name, phoneNumber, email)\r\n      setName('')\r\n      setPhoneNumber('')\r\n      setEmail('')\r\n    }\r\n  };\r\n\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2> \r\n        <ContactForm />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList contacts={contacts} appointments={appointments} />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,SAASC,WAAW,QAAQ,0CAA0C;AACtE,SAASC,QAAQ,QAAQ,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9D,OAAO,MAAMC,YAAY,GAAGC,IAAA,IAAgD;EAAAC,EAAA;EAAA,IAA/C;IAAEC,QAAQ;IAAEC,cAAc;IAAEC;EAAa,CAAC,GAAAJ,IAAA;EACrE;AACF;AACA;AACA;EACE,MAAM,CAAEK,IAAI,EAAEC,OAAO,CAAE,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAAEc,WAAW,EAAEC,cAAc,CAAE,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAAEgB,KAAK,EAAEC,QAAQ,CAAE,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAAEkB,aAAa,EAAEC,gBAAgB,CAAE,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EAE3DC,SAAS,CAAC,MAAM;IACdQ,QAAQ,CAACW,OAAO,CAACC,OAAO,IAAI;MAC1B,IAAIA,OAAO,CAACT,IAAI,KAAKA,IAAI,EAAE;QACzBO,gBAAgB,CAAC,IAAI,CAAC;MACxB;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,MAAMG,YAAY,GAAIC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,EAAE;IAClB;AACJ;AACA;AACA;IACI,IAAI,CAACN,aAAa,EAAE;MAClBR,cAAc,CAACE,IAAI,EAAEE,WAAW,EAAEE,KAAK,CAAC;MACxCH,OAAO,CAAC,EAAE,CAAC;MACXE,cAAc,CAAC,EAAE,CAAC;MAClBE,QAAQ,CAAC,EAAE,CAAC;IACd;EACF,CAAC;;EAED;AACF;AACA;AACA;;EAEE,oBACEZ,OAAA;IAAAoB,QAAA,gBACEpB,OAAA;MAAAoB,QAAA,gBACEpB,OAAA;QAAAoB,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eACpBxB,OAAA,CAACH,WAAW;QAAAwB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACP,eACVxB,OAAA;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,eACNxB,OAAA;MAAAoB,QAAA,gBACEpB,OAAA;QAAAoB,QAAA,EAAI;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eACjBxB,OAAA,CAACF,QAAQ;QAACM,QAAQ,EAAEA,QAAS;QAACE,YAAY,EAAEA;MAAa;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACpD;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACN;AAEV,CAAC;AAACrB,EAAA,CAlDWF,YAAY;AAAAwB,EAAA,GAAZxB,YAAY;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}